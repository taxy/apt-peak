#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import gtk
import apt_pkg
import sys
import os
from peak_common import Peak
from peak_common import Peak_tree

class Package:
    def __init__(self, gpeak, pkg):
        self.pkg = pkg
        self.is_peak = False
        self.is_confirmed = False
        self.is_removable = False
        self.treerow_peak = None
        self.treerow_confirmed = None
        self.treerow_removable = None
        self.gpeak = gpeak
        gpeak.packages[pkg.id] = self

    def pcolor(self):
        if not self.is_peak:
            return "#000088"
        if self.is_confirmed:
            return "#008800"
        if self.is_removable:
            return "#880000"
        return "#000000"

    def add_row(self, liststore):
        iter_row = liststore.append([self.pkg.get_fullname(True), self.pcolor(), self.pkg.id])
        path_row = liststore.get_path(iter_row)
        return gtk.TreeRowReference(liststore, path_row)

    def remove_row(self, treerow):
        treemodel = treerow.get_model()
        iter_row = treemodel.get_iter(treerow.get_path())
        treemodel.remove(iter_row)

    def recolor(self, treerow):
        treemodel = treerow.get_model()
        iter_row = treemodel.get_iter(treerow.get_path())
        treemodel.set_value(iter_row, 1, self.pcolor())

    def update_rows(self):
        in_confirmed = self.is_confirmed
        in_removable = self.is_removable
        in_peak = self.is_peak and not self.is_confirmed

        if in_confirmed:
            if self.treerow_confirmed == None:
                self.treerow_confirmed = self.add_row(self.gpeak.confirmed_liststore)
            else:
                self.recolor(self.treerow_confirmed)
        else:
            if self.treerow_confirmed != None:
                self.remove_row(self.treerow_confirmed)
                self.treerow_confirmed = None

        if in_removable:
            if self.treerow_removable == None:
                self.treerow_removable = self.add_row(self.gpeak.removable_liststore)
            else:
                self.recolor(self.treerow_removable)
        else:
            if self.treerow_removable != None:
                self.remove_row(self.treerow_removable)
                self.treerow_removable = None

        if in_peak:
            if self.treerow_peak == None:
                self.treerow_peak = self.add_row(self.gpeak.peak_liststore)
            else:
                self.recolor(self.treerow_peak)
        else:
            if self.treerow_peak != None:
                self.remove_row(self.treerow_peak)
                self.treerow_peak = None

class GPeak (object):

    def __init__(self):
        self.builder = gtk.Builder()
        glade_file = "apt-peak.glade"
        if not os.path.exists(glade_file):
            glade_file = "/usr/share/apt-peak/glade/apt-peak.glade"
        self.builder.add_from_file(glade_file)
        self.builder.connect_signals(self)

    def list_orphans(self):

        peak = Peak(self.cache)

        for otherpkg in self.cache.packages:
            if peak.is_peak(otherpkg):
                package = Package(self, otherpkg)
                package.is_peak = True

    def update_lists(self):
        for pkgid, package in self.packages.items():
            package.update_rows()

    def init_gui_objects(self):
        self.confirmed = self.builder.get_object("confirmed")
        self.confirmed.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        self.peak = self.builder.get_object("peak")
        self.peak.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        self.removable = self.builder.get_object("removable")
        self.removable.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        self.confirmed_liststore = self.builder.get_object("confirmed_liststore")
        self.confirmed_liststore.set_sort_column_id(0, gtk.SORT_ASCENDING)

        self.peak_liststore = self.builder.get_object("peak_liststore")
        self.peak_liststore.set_sort_column_id(0, gtk.SORT_ASCENDING)

        self.removable_liststore = self.builder.get_object("removable_liststore")
        self.removable_liststore.set_sort_column_id(0, gtk.SORT_ASCENDING)

        self.perform_remove = self.builder.get_object("perform_remove")

    def confirm_package(self, package, conf_value):
        package.is_confirmed = conf_value
        if conf_value:
            self.confirmed_set.add(package.pkg.get_fullname(True))
            package.is_removable = False
        else:
            self.confirmed_set.remove(package.pkg.get_fullname(True))
            if not package.is_peak:
                package.is_removable = True

    def confirm(self, *args):
        conf_value = False
        treeview = None
        if args[0].get_label() == "<< Confirm":
            treeview = self.peak
            conf_value = True
        if args[0].get_label() == "Unconfirm >>":
            treeview = self.confirmed
            conf_value = False
        if args[0].get_label() == "Move to confirmed >>":
            treeview = self.removable
            conf_value = True

        treemodel, paths = treeview.get_selection().get_selected_rows()
        treerows = list()
        for path in paths:
            treerows.append(gtk.TreeRowReference(treemodel, path))
        for treerow in treerows:
            path = treerow.get_path()
            package = self.packages[treemodel[path][2]]
            self.confirm_package(package, conf_value)
            package.update_rows()
        self.perform_remove.set_sensitive(False)

    def remove(self, *args):
        treemodel, paths = self.peak.get_selection().get_selected_rows()
        for path in paths:
            package = self.packages[treemodel[path][2]]
            package.is_removable = True
            package.update_rows()
        self.perform_remove.set_sensitive(False)

    def clear_removables(self, *args):
        not_peak = list()

        for pkgid, package in self.packages.items():
            if package.is_removable:
                package.is_removable = False
                package.update_rows()
                if not package.is_peak:
                    not_peak.append(pkgid)

        for pkgid in not_peak:
            self.packages.pop(pkgid)
        self.perform_remove.set_sensitive(False)


    def add_confirm_set(self):
        not_package = list()
        for package_name in self.confirmed_set:
            try:
                pkg = self.cache[package_name]
                if pkg.id in self.packages:
                    package = self.packages[pkg.id]
                else:
                    package = Package(self, pkg)
                package.is_confirmed = True

            except KeyError as e:
                print("Package not found:", str(e).strip('"'), file=sys.stderr)
                not_package.append(package_name)
        for package_name in not_package:
            self.confirmed_set.remove(package_name)

    def add_peak_tree(self, *args):
        remove = list()
        keep = list()
        not_peak = list()
        peak_tree = Peak_tree(self.cache)

        for pkgid, package in self.packages.items():
            if package.is_removable:
                if package.is_peak:
                    remove.append(package.pkg)
                else:
                    package.is_removable = False
                    package.update_rows()
                    not_peak.append(pkgid)
            if package.is_confirmed:
                    keep.append(package.pkg)

        for pkgid in not_peak:
            self.packages.pop(pkgid)

        if len(remove) == 0:
            self.perform_remove.set_sensitive(False)
            return
        removable = list()
        peak_tree.get_peak_tree(remove, keep, removable)

        for pkg in removable:
            if pkg.id in self.packages:
                package = self.packages[pkg.id]
            else:
                package = Package(self, pkg)
            package.is_removable = True
            package.update_rows()
        self.perform_remove.set_sensitive(True)

    def refresh(self, *args):
        self.confirmed_liststore.clear()
        self.removable_liststore.clear()
        self.peak_liststore.clear()
        self.packages = dict()
        self.cache = apt_pkg.Cache()
        print("Search peak packages...", end="")
        sys.stdout.flush()
        self.list_orphans()
        print(" Done")
        sys.stdout.flush()

        self.add_confirm_set()

        self.update_lists()
        self.perform_remove.set_sensitive(False)

    def run(self):
        self.builder.get_object("gapt_peak").show_all()
        self.init_gui_objects()
        self.load_confirm_set()

        self.refresh()
        gtk.main()

    def click_perform_remove(self, *args):
        remove = list()
        for pkgid, package in self.packages.items():
            if package.is_removable:
                remove.append(package.pkg.get_fullname(True))
        stream = os.popen("x-terminal-emulator -e sudo apt-get purge " + " ".join(remove))
        stream.read()
        stream.close()


    def load_confirm_set(self):
        load_file = os.path.expanduser("~/.config/apt-peak/confirmed.list")
        self.confirmed_set = set()
        if not os.path.exists(load_file):
            load_file = os.path.expanduser("~/.config/packet-peak/confirmed.list")
            if not os.path.exists(load_file):
                return
        with open(load_file, 'r') as f:
            lines = f.readlines()
        [self.confirmed_set.add(e.strip()) for e in lines]

    def save_confirm_set(self):
        save_dir = os.path.expanduser("~/.config/apt-peak")
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        outfile = open(save_dir + "/confirmed.list", 'w')
        outfile.write("\n".join(self.confirmed_set))
        outfile.close()

    def on_window1_destroy(self, *args):
        self.save_confirm_set()
        gtk.main_quit()


apt_pkg.init()
GPeak().run()
