#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import gtk
import apt_pkg
import sys
from peak_common import Peak

class Package:
    def __init__(self, pkg_dict, pkg):
        self.pkg = pkg
        self.is_peak = False
        self.is_confirmed = False
        self.is_removable = False
        pkg_dict[pkg.id] = self

class GPeak (object):

    def __init__(self):
        self.builder = gtk.Builder()
        self.builder.add_from_file("packet-peak.glade")
        self.builder.connect_signals(self)

    def list_orphans(self):

        peak = Peak(self.cache)

        for otherpkg in self.cache.packages:
            if peak.is_peak(otherpkg):
                package = Package(self.packages, otherpkg)
                package.is_peak = True

    def pcolor(self, package):
        if not package.is_peak:
            return "#000088"
        if package.is_confirmed:
            return "#008800"
        if package.is_removable:
            return "#880000"
        return "#000000"


    def update_confirmed_list(self):
        self.confirmed_liststore.clear()
        for pkgid, package in self.packages.items():
            if package.is_confirmed:
                self.confirmed_liststore.append([package.pkg.get_fullname(True), self.pcolor(package), pkgid])

    def update_peak_list(self):
        self.peak_liststore.clear()
        for pkgid, package in self.packages.items():
            if package.is_peak and not package.is_confirmed and not package.is_removable:
                self.peak_liststore.append([package.pkg.get_fullname(True), self.pcolor(package), pkgid])

    def update_removable_list(self):
        self.removable_liststore.clear()
        for pkgid, package in self.packages.items():
            if package.is_removable:
                self.removable_liststore.append([package.pkg.get_fullname(True), self.pcolor(package), pkgid])

    def update_lists(self):
        self.update_confirmed_list()
        self.update_peak_list()
        self.update_removable_list()

    def init_gui_objects(self):
        self.confirmed = self.builder.get_object("confirmed")
        self.confirmed.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        self.peak = self.builder.get_object("peak")
        self.peak.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        self.removable = self.builder.get_object("removable")
        self.removable.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        self.confirmed_liststore = self.builder.get_object("confirmed_liststore")
        self.confirmed_liststore.set_sort_column_id(0, gtk.SORT_ASCENDING)

        self.peak_liststore = self.builder.get_object("peak_liststore")
        self.peak_liststore.set_sort_column_id(0, gtk.SORT_ASCENDING)

        self.removable_liststore = self.builder.get_object("removable_liststore")
        self.removable_liststore.set_sort_column_id(0, gtk.SORT_ASCENDING)

    def confirm(self, *args):
        conf_value = False
        treeview = None
        if args[0].get_label() == "<< Confirm":
            treeview = self.peak
            conf_value = True
        if args[0].get_label() == "Unconfirm >>":
            treeview = self.confirmed
            conf_value = False

        treemodel, paths = treeview.get_selection().get_selected_rows()
        for path in paths:
            self.packages[treemodel[path][2]].is_confirmed = conf_value
        self.update_lists()

    def refresh(self, *args):
        self.packages = dict()
        self.cache = apt_pkg.Cache()
        print("Search peak packages...", end="")
        sys.stdout.flush()
        self.list_orphans()
        print(" Done")
        sys.stdout.flush()

        self.update_lists()

    def run(self):
        self.builder.get_object("xpacket_peak").show_all()
        self.init_gui_objects()

        self.refresh()
        gtk.main()

    def on_window1_destroy(self, *args):
        gtk.main_quit()


apt_pkg.init()
GPeak().run()
